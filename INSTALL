#!/usr/bin/env python
import os
import sys
import shutil

# a list of files that we don't install (symlink) like everything else
blacklist = [
    '.DS_Store',
    '.git',
    '.gitignore',
    'INSTALL',
    'README.md',
    'localrc',
    'new_mac.sh']

src_dirpath = os.path.abspath(os.path.dirname(__file__))  # aka, here


def mkdir_p(dirpath, noop=False):
    print 'mkdir -p %s' % dirpath
    if not noop:
        if not os.path.exists(dirpath):
            os.makedirs(dirpath)


def touch(filepath, noop=False):
    print 'touch %s' % filepath
    if not noop:
        with open(filepath, 'w') as fd:
            fd.write('Write access granted. This file can be safely deleted.')


def move(src, dest, noop=False):
    print 'mv %s %s' % (src, dest)
    if not noop:
        shutil.move(src, dest)


def copy(src, dest, noop=False):
    print 'cp %s %s' % (src, dest)
    if not noop:
        shutil.copy(src, dest)


def remove(filepath, noop=False):
    print 'rm %s' % filepath
    if not noop:
        os.remove(filepath)


def symlink(src, dest, noop=False):
    # ln [-Ffhinsv] source_file [target_file]
    #   the source_file should already exist.
    #   the target_file is what you're creating.
    print 'ln -s %s %s' % (src, dest)
    if not noop:
        os.symlink(src, dest)


def test_dirpath(dirpath, noop=False):
    '''Returns true if the directory exists / can be created and we have write access'''
    try:
        mkdir_p(dirpath, noop=noop)
        test_filepath = os.path.join(dirpath, 'dummy.txt')
        touch(test_filepath, noop=noop)
        remove(test_filepath, noop=noop)
        return True
    except Exception, exc:
        print >> sys.stderr, exc
        return False


def trash(src, trash_dirpath, noop=False):
    dest = os.path.join(trash_dirpath, src.replace('../.', ''))
    move(src, dest, noop=noop)


def install_scripts(dirpath, noop=False):
    if not os.path.exists(dirpath):
        git_clone_command = 'git clone git://github.com/chbrown/scripts.git %s' % dirpath
        print git_clone_command
        if not noop:
            os.system(git_clone_command)
    else:
        print '(ls -l) %s/' % dirpath


def main():
    import argparse
    parser = argparse.ArgumentParser(description='Symlink version controlled dotfiles into home directory',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-n', '--dry-run', action='store_true', help='Do not create, move, or delete anything')
    parser.add_argument('-d', '--destination', help='Destination directory', default=os.path.expanduser('~'))
    parser.add_argument('-l', '--local-rc', help='Name of local rc file', default='.localrc')
    parser.add_argument('-s', '--scripts', help='Scripts path', default='~/bin')
    parser.add_argument('-t', '--trash', help='Trash directory')

    opts = parser.parse_args()
    dest_dirpath = opts.destination
    noop = opts.dry_run

    trash_dirpath = opts.trash
    if not trash_dirpath:
        trash_dirpath = '/tmp/dotfiles-originals'
        # see if we have access to root /tmp
        if not test_dirpath(trash_dirpath, noop=noop):
            # if not, default to '<destination>/tmp'
            trash_dirpath = os.path.join(dest_dirpath, 'tmp')
            mkdir_p(trash_dirpath, noop=noop)

    filenames = [filename for filename in os.listdir(src_dirpath) if filename not in blacklist]
    for filename in filenames:
        src_filepath = os.path.join(src_dirpath, filename)
        dest_filepath = os.path.join(dest_dirpath, '.' + filename)
        if os.path.islink(dest_filepath):
            existing_dest_realpath = os.path.realpath(dest_filepath)
            print '(ls -l) %s -> %s' % (dest_filepath, existing_dest_realpath)
            remove(dest_filepath, noop=noop)
        elif os.path.exists(dest_filepath):
            print '(ls -l) %s' % dest_filepath
            trash(dest_filepath, trash_dirpath, noop=noop)

        # the source path is evaluated relative to the link path.
        src_relpath = os.path.relpath(src_filepath, dest_dirpath)
        symlink(src_relpath, dest_filepath, noop=noop)

    local_rc_filepath = os.path.join(dest_dirpath, opts.local_rc)
    if not os.path.exists(local_rc_filepath):
        src_filepath = os.path.join(src_dirpath, 'localrc')
        copy(src_filepath, local_rc_filepath, noop=noop)
    else:
        print '(ls -l) %s' % local_rc_filepath

    # install scripts to ~/bin if ~/bin does not exist
    install_scripts(os.path.expanduser(opts.scripts), noop=noop)


if __name__ == '__main__':
    main()
