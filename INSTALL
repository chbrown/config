#!/usr/bin/env python
import os
import shutil

# a list of files that we don't install (symlink) like everything else
blacklist = [
    'INSTALL', 'README.md', '.DS_Store', '.git', '.gitignore'
    'bashrc.local', 'new_mac.sh', 'scripts.sh']


def mkdirp(dirpath):
    if not os.path.exists(dirpath):
        os.makedirs(dirpath)
    return dirpath


def move(src, dest):
    print '- mv %s %s' % (src, dest)
    os.rename(src, dest)


def remove(filepath):
    print "- rm %s" % filepath
    os.remove(filepath)


def symlink(src, dest):
    # ln [-Ffhinsv] source_file [target_file]
    #   the source_file should already exist.
    #   the target_file is what you're creating.
    print 'ln -s %s %s' % (src, dest)
    os.symlink(src, dest)


def trash(filepath, trash_directory, remove_on_failure=False):
    dest = os.path.join(trash_directory, filepath.replace('../.', ''))
    try:
        move(filepath, dest)
    except Exception, e:
        print e
        if remove_on_failure:
            remove(filepath)


def main():
    # Run this in its original directory!
    here = os.path.abspath(os.path.dirname(__file__))
    parent = os.path.dirname(here)
    print 'here', here, 'parent', parent

    try:
        trash_directory = mkdirp('/tmp/dotfiles-originals')
        dummy_file = os.path.join(trash_directory, 'dummy.txt')
        with open(dummy_file, 'w') as fp:
            fp.write('file access tested successfully')
    except Exception, e:
        print e
        trash_directory = mkdirp('../tmp')

    for src in os.listdir('.'):
        if src not in blacklist:
            dest = '../.%s' % src
            # lexists is like .exists() but returns true for broken symbolic links
            if os.path.lexists(dest):
                if os.path.islink(dest):
                    print "- %s links to -> %s" % (dest, os.path.realpath(dest))
                    remove(dest)
                else:
                    print "- %s already exists." % dest
                    trash(dest)

            # the source path is evaluated relative to the link path.
            src = os.path.relpath(src, parent)
            symlink(src, dest)

    bashrc_local = '../.bashrc.local'
    if not os.path.exists(bashrc_local):
        print 'cp %s %s' % ('bashrc.local', bashrc_local)
        shutil.copyfile('bashrc.local', bashrc_local)

main()
